package com.actionsmicro.airplay.crypto;

import com.actionsmicro.utils.Log;

public class FairPlay {
	private static final String TAG = "FairPlay";

	static {
        System.loadLibrary("fairplay-jni");
    }
	
	private native static int fp_setup_init();
	private native static byte[] fp_setup_phase1(byte[] data, int size, boolean isAudio);
	private native static byte[] fp_setup_phase2(byte[] data, int size, boolean isAudio);
	private native static byte[] fp_decrypt(byte[] data, int size);
	
	public synchronized static int init() {
		Log.d(TAG, "init");
		int result = fp_setup_init();
		Log.d(TAG, "init done");
		return result;
	}
	public synchronized static byte[] setupPhase1(byte[] data, int size, boolean isAudio) {
		Log.d(TAG, "setupPhase1");
		byte[] result = fp_setup_phase1(data, size, isAudio);
		Log.d(TAG, "setupPhase1 done");
		return result;
	}
	public synchronized static byte[] setupPhase2(byte[] data, int size, boolean isAudio) {
		Log.d(TAG, "setupPhase2");
		byte[] result = fp_setup_phase2(data, size, isAudio);
		Log.d(TAG, "setupPhase2 done");
		return result;
	}
	public synchronized static byte[] decrypt(byte[] data, int size) {
		Log.d(TAG, "decrypt");
		byte[] result = fp_decrypt(data, size);
		Log.d(TAG, "decrypt done");
		return result;
	}
	public static void test() {
		FairPlay.fp_setup_init();
		try {
			Thread.sleep(100);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		final byte input[] = {0x46, 0x50, 0x4c, 0x59, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 0x00, 0x02, (byte)0xbb};
		final byte output[] = FairPlay.fp_setup_phase1(input, input.length, true);
		
		final byte input2[] = {0x46, 0x50, 0x4c, 0x59, 0x03, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, (byte) 0x98, 0x02, (byte) 0x8f, 0x1a,
				 (byte)0x9c,  (byte)0xa8, 0x35,  (byte)0x8e,  (byte)0xaf,  (byte)0xd9,  (byte)0xe5,  (byte)0x8a, 0x29, 0x38, 0x76,  (byte)0xe4,  (byte)0xb9, 0x72,  (byte)0xfa, 0x7e, 0x38, 0x13, (byte) 0xdf, (byte) 0xd3, (byte) 0xd9,  (byte)0x88, 0x13,
				0x5a, 0x6b,  (byte)0xd9, (byte) 0xcc, (byte) 0xef, 0x18,  (byte)0x9a, 0x7f, 0x69, 0x7a,  (byte)0x9e,  (byte)0x9d, 0x55, 0x4c, 0x2a, 0x31, 0x1e, 0x05, 0x54, 0x7d, (byte) 0x89, 0x73, 0x3b,
				 (byte)0xa0, 0x47, 0x1d, 0x2c, 0x71, 0x4e, (byte) 0xc7,  (byte)0xe0, 0x1b, 0x3d, 0x29, 0x79,  (byte)0xf4,  (byte)0xa3, 0x68, 0x0c, (byte) 0xa4,  (byte)0x87, (byte) 0xf9, 0x06,  (byte)0xd3, (byte) 0x92,  (byte)0xb9,
				0x38,  (byte)0xdb,  (byte)0xcd,  (byte)0xeb, 0x05, 0x18,  (byte)0xfa, 0x77,  (byte)0xfd, 0x68, 0x1c,  (byte)0xda,  (byte)0x90,  (byte)0x94, 0x18, (byte) 0xf8, (byte) 0x81, (byte) 0xa7, (byte) 0xa6, (byte) 0xc5, 0x0b, 0x2d, (byte) 0xd8,
				 (byte)0xfa, 0x34, 0x72, 0x62,  (byte)0xab,  (byte)0x87,  (byte)0xf2,  (byte)0xe1, 0x2f, 0x27, 0x50,  (byte)0xd3, 0x48,  (byte)0xab, 0x40, 0x23, 0x0c, 0x32, 0x1a, 0x73, (byte) 0xbb, (byte) 0xed, 0x58,
				0x67, 0x55, 0x0c, (byte) 0x8c, (byte) 0xb0, 0x60, 0x36, 0x33, 0x17,  (byte)0xbc, 0x69,  (byte)0xc7, 0x1b,  (byte)0xae,  (byte)0xc0, 0x03, (byte) 0xfe,  (byte)0xbb, (byte) 0xac, 0x34, 0x05, 0x7c, 0x35,
				 (byte)0xa1,  (byte)0xbd, 0x66, 0x53, (byte) 0xb7,  (byte)0xed, 0x3f, (byte) 0xf2, 0x54, 0x56,  (byte)0xbd};
		final byte output2[] = FairPlay.fp_setup_phase2(input2, input2.length, true);

	}
}
